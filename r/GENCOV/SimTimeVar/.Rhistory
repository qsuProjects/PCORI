###########################################################
#THIS R FUNCTION IMPLEMENTS THE METHODOLOGY IN SECTION 3
#For bug reporting, please contact the first author
###########################################################
###########################################################
#Definition of the arguments are as follows:
#no.rows=Number of rows
#no.bin=Number of binary variables
#no.nor=Number of normally distributed variables
#prop.vec.bin=Vector of marginal proportions for binary variables
#mean.vec.nor=Vector of means for normal variables
#var.nor=Vector of variances for normal variables
#corr.vec=Specified correlations among all variables
d=no.bin+no.nor #d is the total dimension
#adjust.corrs=T/F. If a correlation is out of bounds, should it
# be adjusted to the closest feasible values?
############################################################
#Important note 1: For convenience, binary variables are assumed
#to come first, then normal variables follow
#Important note 2: Correlations are specified in vector form,
#rather than a matrix form. If the dimension is d, d*(d-1)/2
#non-redundant correlation terms must be specified. The order
#in which correlations are specified is based on the upper diagonal
#elements. For example, if there are four variables (X1,X2,X3,X4),
#corr.vec is specified in the following form:
#c(Corr(X1,X2),Corr(X1,X3),Corr(X1,X4),Corr(X2,X3),Corr(X2,X4),
#Corr(X3,X4))
############################################################
#Series of control statements to prevent obvious ARGUMENT
#SPECIFICATION ERRORS:
if ((no.rows<1)|(floor(no.rows)!=no.rows)){stop("Number of rows must be
an integer whose value is at least 1!\n")}
if ((no.bin<1)|(floor(no.bin)!=no.bin)){stop("Number of binary variables
must be an integer whose value is at least 1!\n")}
if ((no.nor<1)|(floor(no.nor)!=no.nor)){stop("Number of normal variables
must be an integer whose value is at least 1!\n")}
if ((min(prop.vec.bin)<=0)|(max(prop.vec.bin)>=1)){
stop("Proportions for binary variables must be between 0 and 1!\n")}
if (length(prop.vec.bin)!=no.bin){stop("Proportion vector
is misspecified, dimension is wrong!\n")}
if (length(mean.vec.nor)!=no.nor){
stop("Mean vector for the normal part is misspecified,
dimension is wrong!\n")}
if (length(var.nor)!=no.nor){
stop("Vector of variances for the normal part is misspecified,
dimension is wrong!\n")}
if (min(var.nor<=0)){stop("Variances must be positive!\n")}
if(length(corr.vec)!=(d*(d-1)/2)){
stop("Vector of correlations is misspecified, dimension is wrong!\n")}
###################################################################
#Statements to check CORRELATION BOUND VIOLATIONS
#Form a correlation matrix from the specified correlation vector
sigma=diag(d)
temp=1
for(i in 1:(d-1)){
for(j in (i+1):d){
sigma[i,j]=sigma[j,i]=corr.vec[temp]
temp=temp+1
}
}
#Check if the specified correlation matrix is positive definite, if not
#find the nearest positive definite matrix (Step 2 in the algorithm)
if(is.positive.definite(sigma)==FALSE)
{sigma=make.positive.definite(sigma)
print("Specified correlation matrix is not positive definite,")
print("Algorithm will be using the closest positive definite matrix!")}
diag(sigma)=1
p=prop.vec.bin
q=1-p
#Check if the correlations for binary-binary combinations are
#in the feasible range (Step 3 in the algorithm)
#Boundaries for BB =[max(-sqrt((pi*pj)/(qi*qj)),-sqrt((qi*qj)/(pi*pj))),
#min(sqrt((pi*qj)/(qi*pj)),sqrt((qi*pj)/(pi*qj)))]
L_BB=diag(no.bin)
U_BB=diag(no.bin)
for(i in 1:no.bin){
for(j in 1:no.bin){
if (i!=j) L_BB[i,j]=L_BB[j,i]=max(-sqrt((p[i]*p[j])/(q[i]*q[j])),
-sqrt((q[i]*q[j])/(p[i]*p[j])))
if (i!=j) U_BB[i,j]=U_BB[j,i]=min(sqrt((p[i]*q[j])/(q[i]*p[j])),
sqrt((q[i]*p[j])/(p[i]*q[j])))
}
}
for(i in 1:no.bin){
for(j in 1:no.bin){
if(sigma[i,j]<L_BB[i,j] | sigma[i,j]>U_BB[i,j]) {
if (!adjust.corrs) {
# if user does not want to adjust correlations, give error
stop("BB corrrelation [", i,",",j,"] is out of range! Specify a feasible number!")
} else {
#adjust correlation to the closest feasible value
cat( c("BB corrrelation [", i,",",j,"],", sigma[i,j], ", is out of range! Used closest feasible correlation instead\n"))
sigma[i,j] = sigma[j,i] = closest(sigma[i,j], c( L_BB[i,j], U_BB[i,j] ) )
}
}
}
}
#Compute the biserial correlations for binary-normal combinations and
#check if they are in the feasible range (Steps 4 and 6 in the algorithm)
#temporary matrix
BN_temp=sigma
# replace the BN values in BN_temp with the corresponding phi values
for(i in (no.bin+1):d){
for(j in 1:no.bin){
BN_temp[i,j]=BN_temp[i,j]/(dnorm(qnorm(p[j]))/sqrt(p[j]*q[j]))
}
}
for(i in (no.bin+1):d){
for(j in 1:no.bin){
if (BN_temp[i,j]< -1 | BN_temp[i,j]> 1) {
if (!adjust.corrs) {q
# if user does not want to adjust correlations, give error
stop("BN correlation [", i,",",j,"] is out of range! Specify a feasible number!")
} else {
#adjust correlation to the closest feasible value
BN_temp[i,j] = closest(BN_temp[i,j], c(-1, 1))
}
}
}
}
#keep the BN part of BN_temp matrix
BN=BN_temp[(no.bin+1):d,1:no.bin]
#Compute the tetrachoric correlations for binary-binary combinations
#(Step 5 in the algorithm)
# create sigmaBB matrix by converting BB part of sigma into polychoric correlations
sigmaBB=diag(no.bin)
for(i in 1:no.bin){
for(j in 1:no.bin){
if (i > j) {
sigmaBB[i,j] = sigmaBB[j,i] = phi2poly( sigma[i,j] ,p[i],p[j])
#force symmetry because phi2poly is an imperfect optimization process with rounding error
}
#########################################################################
###### NOTE: ABOVE ROUNDING OF SIGMA ENTRY IS A LITTLE SKETCH!!!!! ######
#########################################################################
}
}
#Biserial correlations for binary-normal combinations
sigmaBN=BN
#Combine all three types (binary-binary, binary-normal, normal-normal)
#of correlations to construct the overall correlation matrix
#(Step 7 in the algorithm)
sigma_new=sigma
sigma_new[1:no.bin,1:no.bin]=sigmaBB
sigma_new[(no.bin+1):d,1:no.bin]=sigmaBN
sigma_new[1:no.bin,(no.bin+1):d]=t(sigmaBN)
#Check if the final correlation matrix is positive definite, if not
#find the nearest positive definite matrix (Step 8 in the algorithm)
if(is.positive.definite(sigma_new)==FALSE) {
sigma_new=make.positive.definite(sigma_new)
print("Final correlation matrix is not positive definite,")
print("Algorithm will be using the closest positive definite matrix!")
}
#Generate multivariate normal data (Step 9 in the algorithm)
data=rmvnorm(no.rows,mean=rep(0,d), sigma=sigma_new)
#Obtain binary variables by the thresholds determined by marginal proportions
#(Step 10 in the algorithm)
for(i in 1:no.rows){
for(j in 1:no.bin){
if(data[i,j]<=qnorm(1-p[j])) data[i,j]=0 else data[i,j]=1
}
}
#Go back to the original scale for normal variables by reverse centering and
#scaling (Step 11 in the algorithm)
for(i in 1:no.rows){
temp=1
for(j in (no.bin+1):d){
data[i,j]=mean.vec.nor[temp]+(data[i,j]*sqrt(var.nor[temp]))
temp=temp+1
}
}
#Output is the data matrix!
return(data)
}
#################################################################
#################################################################
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
mus3
dput(mus3)
n.OtherBins
n.TBins
obs
wcor
parameters
mus3 = structure(c(1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1e-04, 1e-04, 0.886306145591761,
1e-04, 1e-04, 1e-04, 1e-04, 0.875187001140343, 0.835990583043838,
1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04, 1e-04,
1e-04, 1e-04, 69.7139993804559, 61.3137637852213, 68.3375516615242,
57.7893277997516, 66.3744152975352, 63.7829561873355, 66.3864252981679,
68.8513253460358, 67.4120718557, 67.8332265185068, 192.366192293195,
128.048983102048, 171.550401133259, 120.348392753954, 158.840864356998,
170.13484760994, 113.512220330821, 162.715528382999, 138.476877345895,
159.841096973242, 115.026417822477, 109.527137142158, 117.087914485084,
121.153861460319, 109.95973584141, 122.96960673409, 90.5100006255084,
107.523229006601, 108.971677388246, 115.641818648526, -4.33184270434101,
-5.45143483618415, -2.56331188314257, -1.38204452333064, -1.61744564863871,
1.83911233741448, 2.0488338883998, -0.237095062415858, -5.47497506857878,
-3.53078955238741), .Dim = c(10L, 7L))
n.OtherNorms
expand_subjects( mus3 = mus3, n.OtherNorms = 2, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 3, parameters = params )
expand_subjects( mus3 = mus3, n.OtherNorms = 1, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 3, parameters = params )
make_one_dataset = function(n, obs, n.TBins, pcor, wcor, parameters, cat.parameters) {
### step 1 - extract parameter vectors from given dataframe
bin.props = parameters$prop[ parameters$type == "static.binary" ]
nor.means = parameters$across.mean[ parameters$type %in% c("subject.prop", "normal", "time.function") ]
across.vars = parameters$across.var[ parameters$type %in% c("subject.prop", "normal", "time.function") ]
static.var.names = parameters$name[ grep("static", parameters$type) & parameters$type != "cat.static" ]  # names of static variables, but not categoricals
### step 2 - number of different types of variables
n.BinVars = length( bin.props )  # number binary variables (16)
n.NormVars = length( nor.means )  # number normal variables
n.OtherNorms = n.NormVars - n.TBins  # number of non-drug normal variables
n.OtherBins = n.BinVars - n.TBins  # number of non-drug binary variables
n.Vars = n.OtherBins + n.OtherNorms + n.TBins  # total number of variables in study (not double-counting drugs)
## step 3 - convert population cor matrix into vectors to appease Demirtas function
pcor.vec = upper_tri_vec(pcor)
### step 4 - generate mu for each person
mus0 = mod.jointly.generate.binary.normal( no.rows = n, no.bin = n.BinVars, no.nor = n.NormVars,
prop.vec.bin = bin.props,
mean.vec.nor = nor.means,
var.nor = across.vars, corr.vec = pcor.vec )
### step 5 - if drug indicator is 0, then convert probability of receiving drug to 0
mus1 = override_tbin_probs(mus0, n.TBins, n.OtherBins)
### step 6 - set aside ever-use indicators and expand them
everUser = mus1[, ( 1:n.TBins ) ]
everUserExp = expand_matrix(everUser, obs)
### step 7 - temporarily remove drug indicators from matrix
mus2 = mus1[, -c( 1:n.TBins ) ]
### step 8 - "proportionize" normal drug variables (force them to be strictly between 0 and 1)
bins = mus2[ , (n.OtherBins + 1):(n.OtherBins + n.TBins) ]  # just binaries
bins.prop = proportionize(bins)  # proportionized version of the binaries
mus3 = mus2
mus3[ , (n.OtherBins + 1):(n.OtherBins + n.TBins) ] = bins.prop
browser()
### step 9 - generate time-varying data for each person
d1 = expand_subjects(mus3, n.OtherNorms, n.OtherBins, n.TBins, wcor, obs, parameters)
### step 10 - add subject ID, ever-use indicators, and variable names
id = rep(1:n, each=obs)
d2 = as.data.frame( cbind(id, d1, everUserExp) )
names = c( "id", as.character( parameters$name[ parameters$type=="static.binary" & !has_drug_suffix( parameters$name ) ] ),
as.character( parameters$name[ parameters$type=="subject.prop" ] ),
as.character( parameters$name[ parameters$type %in% c("normal", "time.function") ] ),
as.character( parameters$name[ has_drug_suffix( parameters$name ) ] ) )
names(d2) = names
d3 = d2
### step 11 - add a single categorical variable
if (!is.null(cat.parameters)) d4 = add_one_categorical(d3, n, obs, cat.parameters)
else d4 = d3
### step 12 - add time-function variables
d5 = add_time_function_vars(d4, obs, parameters)
### step 13 - override static variables
for (i in static.var.names) {
d5 = override_static(.static.var.name=i, .id.var.name="id", .d=d5, .obs=obs)
}
sim = list( "data" = d5, "ever.user" = everUser )
return(sim)
}
############################## FUNCTION: CHECK FOR DRUG SUFFIX ##############################
#' Checks whether string has "_s" suffix
#'
#' An internal function not intended for the user.
#' @param var.name The string to be checked
#' @export
#' @examples
#' has_drug_suffix("myvariable_s")
#' has_drug_suffix("myvariable")
has_drug_suffix = function( var.name ){
var.name = as.character(var.name)
suffix = substr( var.name, nchar(var.name) - 1, nchar(var.name) )
return(suffix == "_s")
}
############################## FUNCTION: OVERRIDE DRUG PROBS ##############################
#' Override probabilities for time-varying binary variables
#'
#' An internal function not intended for the user. For clusters assigned to have a given time-varying binary variable
#' always equal to 0,
#' overrides to 0 the corresponding proportion of observations with the binary variable equal to 1.
#' @param mus0 The matrix of cluster means.
#' @param n.TBins Number of time-varying binary variables.
#' @param n.OtherBins The number of static binary variables.
#' @param zero A number very close to 0, but slightly larger.
#' @export
#' @examples
#' # make example subject means matrix for 1 static binary,
#' 1 time-varying binary, and 1 normal
#' 50 subjects and 5 observations (latter plays into variance)
#' set.seed(451)
#' mus0 = mod.jointly.generate.binary.normal( no.rows = 50, no.bin = 2, no.nor = 2,
#'                                            prop.vec.bin = c( .5, .35 ),
#'                                            mean.vec.nor = c( .4, 100 ),
#'                                            var.nor = c( (0.4 * 0.6) / 5, 10 ), corr.vec = c(0.05, .08, 0, 0, -0.03, 0) )
#'
#' # note that we have ever-users with non-zero propensities to be on drug: not okay
#' any( mus0[,1] == 0 & mus0[,3] != 0 )
#'
#' # fix them
#' mus1 = override_tbin_probs( mus0, 1, 1 )
#'
#' # all better!
#' any( mus1[,1] == 0 & mus1[,3] > 0.0001 )
#' override_tbin_probs = function(mus0, n.TBins, n.OtherBins, zero=0.0001) {
#'   # number of non-drug variables
#'   n.NonDrugVars = dim(mus0)[2] - n.TBins
#'
#'   for (m in 1:n.TBins) {
#'     # replace each entry in the part of mus0 corresponding to the drug propensities with 0...
#'     # ...if the part of mus0 corresponding to the drug indicator is 0
#'     # otherwise leave the drug propensity alone
#'     mus0[, n.TBins + n.OtherBins + m] = ifelse( mus0[,m] == 0, zero, mus0[, n.TBins + n.OtherBins + m])
#'   }
#'
#'   return(mus0)
#' }
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
n.OtherNorms
expand_subjects( mus3 = mus3, n.OtherNorms = 4, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 3, parameters = params )
expand_subjects( mus3 = mus3, n.OtherNorms = 4, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 30, parameters = params )
# run the example
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
n.OtherNorms
n.OtherBins
n.TBins
wcor
obs
parameters
mus3
wcor
parmas
params
expand_subjects( mus3 = mus3, n.OtherNorms = 4, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 30, parameters = complete_parameters(params) )
expand_subjects( mus3 = mus3, n.OtherNorms = 4, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 30, parameters = complete_parameters(params, n=10) )
expand_subjects( mus3 = mus3, n.OtherNorms = 4, n.OtherBins = 1, n.TBins = 2,
wcor = wcor, obs = 3, parameters = complete_parameters(params, n=10) )
make_prop_drug_time
make_prop_drug_time = function(x) {}
make_prop_drug_time = function(x) {return(NA)}
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
make_one_dataset = function(n, obs, n.TBins, pcor, wcor, parameters, cat.parameters) {
### step 1 - extract parameter vectors from given dataframe
bin.props = parameters$prop[ parameters$type == "static.binary" ]
nor.means = parameters$across.mean[ parameters$type %in% c("subject.prop", "normal", "time.function") ]
across.vars = parameters$across.var[ parameters$type %in% c("subject.prop", "normal", "time.function") ]
static.var.names = parameters$name[ grep("static", parameters$type) & parameters$type != "cat.static" ]  # names of static variables, but not categoricals
### step 2 - number of different types of variables
n.BinVars = length( bin.props )  # number binary variables (16)
n.NormVars = length( nor.means )  # number normal variables
n.OtherNorms = n.NormVars - n.TBins  # number of non-drug normal variables
n.OtherBins = n.BinVars - n.TBins  # number of non-drug binary variables
n.Vars = n.OtherBins + n.OtherNorms + n.TBins  # total number of variables in study (not double-counting drugs)
## step 3 - convert population cor matrix into vectors to appease Demirtas function
pcor.vec = upper_tri_vec(pcor)
### step 4 - generate mu for each person
mus0 = mod.jointly.generate.binary.normal( no.rows = n, no.bin = n.BinVars, no.nor = n.NormVars,
prop.vec.bin = bin.props,
mean.vec.nor = nor.means,
var.nor = across.vars, corr.vec = pcor.vec )
### step 5 - if drug indicator is 0, then convert probability of receiving drug to 0
mus1 = override_tbin_probs(mus0, n.TBins, n.OtherBins)
### step 6 - set aside ever-use indicators and expand them
everUser = mus1[, ( 1:n.TBins ) ]
everUserExp = expand_matrix(everUser, obs)
### step 7 - temporarily remove drug indicators from matrix
mus2 = mus1[, -c( 1:n.TBins ) ]
### step 8 - "proportionize" normal drug variables (force them to be strictly between 0 and 1)
bins = mus2[ , (n.OtherBins + 1):(n.OtherBins + n.TBins) ]  # just binaries
bins.prop = proportionize(bins)  # proportionized version of the binaries
mus3 = mus2
mus3[ , (n.OtherBins + 1):(n.OtherBins + n.TBins) ] = bins.prop
### step 9 - generate time-varying data for each person
d1 = expand_subjects(mus3, n.OtherNorms, n.OtherBins, n.TBins, wcor, obs, parameters)
### step 10 - add subject ID, ever-use indicators, and variable names
id = rep(1:n, each=obs)
d2 = as.data.frame( cbind(id, d1, everUserExp) )
names = c( "id", as.character( parameters$name[ parameters$type=="static.binary" & !has_drug_suffix( parameters$name ) ] ),
as.character( parameters$name[ parameters$type=="subject.prop" ] ),
as.character( parameters$name[ parameters$type %in% c("normal", "time.function") ] ),
as.character( parameters$name[ has_drug_suffix( parameters$name ) ] ) )
names(d2) = names
d3 = d2
### step 11 - add a single categorical variable
if (!is.null(cat.parameters)) d4 = add_one_categorical(d3, n, obs, cat.parameters)
else d4 = d3
### step 12 - add time-function variables
d5 = add_time_function_vars(d4, obs, parameters)
### step 13 - override static variables
for (i in static.var.names) {
d5 = override_static(.static.var.name=i, .id.var.name="id", .d=d5, .obs=obs)
}
sim = list( "data" = d5, "ever.user" = everUser )
return(sim)
}
############################## FUNCTION: CHECK FOR DRUG SUFFIX ##############################
#' Checks whether string has "_s" suffix
#'
#' An internal function not intended for the user.
#' @param var.name The string to be checked
#' @export
#' @examples
#' has_drug_suffix("myvariable_s")
#' has_drug_suffix("myvariable")
has_drug_suffix = function( var.name ){
var.name = as.character(var.name)
suffix = substr( var.name, nchar(var.name) - 1, nchar(var.name) )
return(suffix == "_s")
}
# run the example
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
make_one_dataset = function(n, obs, n.TBins, pcor, wcor, parameters, cat.parameters) {
### step 1 - extract parameter vectors from given dataframe
bin.props = parameters$prop[ parameters$type == "static.binary" ]
nor.means = parameters$across.mean[ parameters$type %in% c("subject.prop", "normal", "time.function") ]
across.vars = parameters$across.var[ parameters$type %in% c("subject.prop", "normal", "time.function") ]
static.var.names = parameters$name[ grep("static", parameters$type) & parameters$type != "cat.static" ]  # names of static variables, but not categoricals
### step 2 - number of different types of variables
n.BinVars = length( bin.props )  # number binary variables (16)
n.NormVars = length( nor.means )  # number normal variables
n.OtherNorms = n.NormVars - n.TBins  # number of non-drug normal variables
n.OtherBins = n.BinVars - n.TBins  # number of non-drug binary variables
n.Vars = n.OtherBins + n.OtherNorms + n.TBins  # total number of variables in study (not double-counting drugs)
## step 3 - convert population cor matrix into vectors to appease Demirtas function
pcor.vec = upper_tri_vec(pcor)
### step 4 - generate mu for each person
mus0 = mod.jointly.generate.binary.normal( no.rows = n, no.bin = n.BinVars, no.nor = n.NormVars,
prop.vec.bin = bin.props,
mean.vec.nor = nor.means,
var.nor = across.vars, corr.vec = pcor.vec )
### step 5 - if drug indicator is 0, then convert probability of receiving drug to 0
mus1 = override_tbin_probs(mus0, n.TBins, n.OtherBins)
### step 6 - set aside ever-use indicators and expand them
everUser = mus1[, ( 1:n.TBins ) ]
everUserExp = expand_matrix(everUser, obs)
### step 7 - temporarily remove drug indicators from matrix
mus2 = mus1[, -c( 1:n.TBins ) ]
### step 8 - "proportionize" normal drug variables (force them to be strictly between 0 and 1)
bins = mus2[ , (n.OtherBins + 1):(n.OtherBins + n.TBins) ]  # just binaries
bins.prop = proportionize(bins)  # proportionized version of the binaries
mus3 = mus2
mus3[ , (n.OtherBins + 1):(n.OtherBins + n.TBins) ] = bins.prop
### step 9 - generate time-varying data for each person
d1 = expand_subjects(mus3, n.OtherNorms, n.OtherBins, n.TBins, wcor, obs, parameters)
### step 10 - add subject ID, ever-use indicators, and variable names
id = rep(1:n, each=obs)
d2 = as.data.frame( cbind(id, d1, everUserExp) )
names = c( "id", as.character( parameters$name[ parameters$type=="static.binary" & !has_drug_suffix( parameters$name ) ] ),
as.character( parameters$name[ parameters$type=="subject.prop" ] ),
as.character( parameters$name[ parameters$type %in% c("normal", "time.function") ] ),
as.character( parameters$name[ has_drug_suffix( parameters$name ) ] ) )
names(d2) = names
d3 = d2
### step 11 - add a single categorical variable
if (!is.null(cat.parameters)) d4 = add_one_categorical(d3, n, obs, cat.parameters)
else d4 = d3
browser()
### step 12 - add time-function variables
d5 = add_time_function_vars(d4, obs, parameters)
### step 13 - override static variables
for (i in static.var.names) {
d5 = override_static(.static.var.name=i, .id.var.name="id", .d=d5, .obs=obs)
}
sim = list( "data" = d5, "ever.user" = everUser )
return(sim)
}
# run the example
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
head(d4)
dput(d4)
head(d4)
fake = d4[d4$id < 3,]
fake
# run the example
sim = make_one_dataset(n=10, obs=30, n.TBins=2, pcor=pcor, wcor=wcor,
parameters=complete_parameters(params, n=10), cat.parameters=cat.params)
dput(fake)
dput(d4[d4$id==1,])
obs
parameters
closest( x = 5, candidates = c(-3, 8, 25) )
BN.rBound(0.1)
BN.rBound(0.5)
document()
document()
document()
build()
document()
build()
mat = matrix( seq(1:10), nrow=2, byrow=F)
document()
build()
run_examples()
document()
build()
run_examples()
build()
document9
document()
build()
run_examples()
(375*4)+260
(375*4)+260+1200
43.21 + 32.89 + 17.03
43.21 + 32.89 + 17.03+65
