d = read.csv(file="2015-03-11_prepped_ipd_data.csv", header=T)
d = d[,-1]
dim(d)  # 6316 X 32
table(d$refid)
table(d$refid)
################# FIT IPD MODELS: AGE-ADJUSTED CORRELATION #################
##### Model 1: random-effects with random intercepts #####
# p-values based on likelihood-ratio test
rs1 = lmer(tl.norm ~ ps.norm + (1|refid), data=d, REML=F)
summary(rs1)
##### Model 2: random-effects with random slopes #####
rs2 = lmer(tl.norm ~ ps.norm + (ps.norm|refid), data=d, REML=F)
summary(rs2)
?lmer
methods(class="merMod")
ranef(rs1)
names(t647.1)
#working directory
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Raw data/Raw Sister Study data/DR00084_00_01")
#read in raw data
sis1 = read.csv(file="raw_data.csv", header=T)
dim(sis1)  # 1717 X 12
library(car)
################# RECODE VARIABLES #################
#for now, only keep the variables we care about
#see codebooks in Data Dictionaries folder for explanations of original coding schemes
age = sis1$Age_Baseline
#telomere length variables
TLratioAv = sis1$Ratio_Av
TLavg = sis1$avgtsAB
#perceived stress
PS = sis1$SE_PSS4
#ever diagnosed with breast cancer
everBC = recode( sis1$FU_Event_BC, " 'B'=1; 'M'=NA ")
#ever diagnosed with clinical depression
everDepress = recode( sis1$MC97, "1=1; 2=0" )
#race
race = recode( sis1$SE_RACE_ETH, " 0='white'; 1='black'; 2='hisp'; 3='other' " )
#new dataframe
sis2 = data.frame(id = sis1$PSID, age, TLratioAv = sis1$Ratio_Av, TLavg = sis1$avgtsAB, PS = sis1$SE_PSS4, prebaselineBC = sis1$FU_DxPrebaseline_BC, everBC, everDepress, ageDepress = sis1$MC98, everDepressMeds = sis1$MC99a, ageDepressMeds = sis1$MC99b, race = sis1$SE_RACE_ETH)
################# SUMMARY STATS FOR META-ANALYSIS #################
#for now, use more common measure, TLratioAv (from case-cohort), for people with both TL measures
#treat as two separate studies
temp1 = subset( sis2, !is.na(sis2$TLratioAv) ) #temp1: people with TLratioAv
temp2 = subset( sis2, is.na(sis2$TLratioAv) ) #temp2: people WITHOUT TLratioAv
dim(temp1)  # n=1085 ("Case-Cohort" study)
dim(temp2)  # n=632 ("Vanguard" study)
names(temp1)
head(temp1)
# add refid to each study
temp1$refid = "a.647.1"
temp2$refid = "a.647.2"
# add sex to each study
temp1$female = 1
temp2$female = 1
head(temp1)
names(temp1)[names(temp1)=="TLratioAv"] = "tl"
head(temp1)
names(temp2)[names(temp2)=="TLavg"] = "tl"
names(temp2)[names(temp2)=="TLavg"] = "tl"; names(temp2)[names(temp2)=="PS"] = "ps"
head(temp2)
################# EXPORT DATA #################
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Prepped data for IPD")
write.csv(temp1, "prepped_data_ref647_parks_sis1.csv")
write.csv(temp2, "prepped_data_ref647_parks_sis2.csv")
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Prepped data for IPD")
library(gtools)
library(data.table)
# read in data for each study
t13 = read.csv(file="prepped_data_ref13_uchino.csv", header=T); dim(t13)  # n=136
t504 = read.csv(file="prepped_data_ref504_georgin.csv", header=T); dim(t504)  # n=19
t941 = read.csv(file="prepped_data_ref941_ludlow.csv", header=T); dim(t941)  # n=69
t838 = read.csv(file="prepped_data_ref838_tyrka.csv", header=T); dim(t838)  # n=31
t648 = read.csv(file="prepped_data_ref648_surtees.csv", header=T); dim(t648)  # n=4353
t647.1 = read.csv(file="prepped_data_ref647_parks_sis1.csv", header=T); dim(t647.1)  # n=1085
t647.2 = read.csv(file="prepped_data_ref647_parks_sis2.csv", header=T); dim(t647.2)  # n=632
################# PREP FOR IPD #################
# merge all the datasets
m = smartbind(t647.1, t647.2, t13, t504, t941, t838, t648)
m = m[,-1]
head(m)
# calculate standardized ps and tl within-study
mt = data.table(m)
mt[, ps.study.mean := mean(ps), by=refid ]  # make study PS mean variable
mt[, ps.study.sd := sd(ps), by=refid ]  # make study PS mean variable
mt[, tl.study.mean := mean(tl), by=refid ]  # make study PS mean variable
mt[, tl.study.sd := sd(tl), by=refid ]  # make study PS mean variable
mt$ps.norm = ( mt$ps - mt$ps.study.mean ) / mt$ps.study.sd
mt$tl.norm = ( mt$tl - mt$tl.study.mean ) / mt$tl.study.sd
mt$refid = as.character(mt$refid)
# save dataframe
write.csv(mt, file=paste(Sys.Date(), "prepped_ipd_data.csv", sep="_"))
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
#                            IPD ANALYSES                                   #
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
################# READ IN MERGED IPD DATA #################
# raw data
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Prepped data for IPD")
d = read.csv(file="2015-03-11_prepped_ipd_data.csv", header=T)
d = d[,-1]
dim(d)  # 6316 X 32
################# FIT IPD MODELS: AGE-ADJUSTED CORRELATION #################
##### Model 1: random-effects with random intercepts #####
# p-values based on likelihood-ratio test
rs1 = lmer(tl.norm ~ ps.norm + (1|refid), data=d, REML=F)
summary(rs1)
table(d$refid)
table( is.na(d$ps), d$refid )
head(temp1)
names(temp1)[names(temp1)=="TLratioAv"] = "tl"; names(temp1)[names(temp1)=="PS"] = "ps"
names(temp2)[names(temp2)=="TLavg"] = "tl"; names(temp2)[names(temp2)=="PS"] = "ps"
################# EXPORT DATA #################
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Prepped data for IPD")
write.csv(temp1, "prepped_data_ref647_parks_sis1.csv")
write.csv(temp2, "prepped_data_ref647_parks_sis2.csv")
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Prepped data for IPD")
library(gtools)
library(data.table)
# read in data for each study
t13 = read.csv(file="prepped_data_ref13_uchino.csv", header=T); dim(t13)  # n=136
t504 = read.csv(file="prepped_data_ref504_georgin.csv", header=T); dim(t504)  # n=19
t941 = read.csv(file="prepped_data_ref941_ludlow.csv", header=T); dim(t941)  # n=69
t838 = read.csv(file="prepped_data_ref838_tyrka.csv", header=T); dim(t838)  # n=31
t648 = read.csv(file="prepped_data_ref648_surtees.csv", header=T); dim(t648)  # n=4353
t647.1 = read.csv(file="prepped_data_ref647_parks_sis1.csv", header=T); dim(t647.1)  # n=1085
t647.2 = read.csv(file="prepped_data_ref647_parks_sis2.csv", header=T); dim(t647.2)  # n=632
################# PREP FOR IPD #################
# merge all the datasets
m = smartbind(t647.1, t647.2, t13, t504, t941, t838, t648)
m = m[,-1]
# calculate standardized ps and tl within-study
mt = data.table(m)
mt[, ps.study.mean := mean(ps), by=refid ]  # make study PS mean variable
mt[, ps.study.sd := sd(ps), by=refid ]  # make study PS mean variable
mt[, tl.study.mean := mean(tl), by=refid ]  # make study PS mean variable
mt[, tl.study.sd := sd(tl), by=refid ]  # make study PS mean variable
mt$ps.norm = ( mt$ps - mt$ps.study.mean ) / mt$ps.study.sd
mt$tl.norm = ( mt$tl - mt$tl.study.mean ) / mt$tl.study.sd
mt$refid = as.character(mt$refid)
# save dataframe
write.csv(mt, file=paste(Sys.Date(), "prepped_ipd_data.csv", sep="_"))
################# READ IN MERGED IPD DATA #################
# raw data
setwd("~/Dropbox/Other work folders/Telomeres meta-analysis/Data from authors/Prepped data for IPD")
d = read.csv(file="2015-03-11_prepped_ipd_data.csv", header=T)
d = d[,-1]
dim(d)  # 6316 X 32
table( is.na(d$ps), d$refid)
table( is.na(d$tl), d$refid)
table( is.na(d$age), d$refid)
# summarize PS by study
ggplot(data=d, aes(x=refid, y=ps, group=refid) ) + geom_boxplot() +
theme_bw()
aggregate(ps ~ refid, d, summary)
################# FIT IPD MODELS: AGE-ADJUSTED CORRELATION #################
##### Model 1: random-effects with random intercepts #####
# p-values based on likelihood-ratio test
rs1 = lmer(tl.norm ~ ps.norm + (1|refid), data=d, REML=F)
summary(rs1)
##### Model 2: random-effects with random slopes #####
rs2 = lmer(tl.norm ~ ps.norm + (ps.norm|refid), data=d, REML=F)
summary(rs2)
##### Model 1: random-effects with random intercepts #####
# p-values based on likelihood-ratio test
rs1 = lmer(tl.norm ~ ps.norm + age + (1|refid), data=d, REML=F)
summary(rs1)
##### Model 2: random-effects with random slopes #####
rs2 = lmer(tl.norm ~ ps.norm + age + (ps.norm|refid), data=d, REML=F)
summary(rs2)
# compare models 1 and 2
anova(rs1, rs2)
dim(d)
summary(rs1)
##### Model 1: random-effects with random intercepts #####
# p-values based on likelihood-ratio test
rs1 = lmer(tl.norm ~ ps.norm + age + (1|refid), data=d, REML=F)
summary(rs1)
# likelihood-ratio test to see effect of ps (same as above)
red = lmer(tl.norm ~ age + (1|refid), data=d, REML=F)
anova(rs1, red)
# no effect of PS
##### Model 2: random-effects with random slopes #####
rs2 = lmer(tl.norm ~ ps.norm + age + (ps.norm|refid), data=d, REML=F)
summary(rs2)
#likelihood-ratio test to see effect of ps
red = lmer(tl.norm ~ age + (1|refid), data=d, REML=F)
anova(rs2, red)
#no effect of PS
# compare models 1 and 2
anova(rs1, rs2)
anova(rs1, rs2)
################################# LOAD DATA AND FUNCTIONS #################################
setwd("~/Dropbox/Personal computer/Sleep/2014 sleep data")
d = read.csv("sleep_data_2.csv", header = TRUE)
library(ggplot2)
convert_hour_min = function(x) {
x2 = c()
for (i in 1:length(x)) {
hour = as.numeric( strsplit( as.character(x[i]), ":" )[[1]][1] )
min = as.numeric( strsplit( as.character(x[i]), ":" )[[1]][2] ) / 60
time = hour + min
x2[i] = time
}
return(x2)
}
overnight_time_diff = function(pm_time, am_time) {
diff.vec = c()
for (i in 1:length(pm_time) ) {
am_hour = as.numeric( strsplit( as.character(am_time[i]), ":" )[[1]][1] )
am_min = as.numeric( strsplit( as.character(am_time[i]), ":" )[[1]][2] )
pm_hour = as.numeric( strsplit( as.character(pm_time[i]), ":" )[[1]][1] )
pm_min = as.numeric( strsplit( as.character(pm_time[i]), ":" )[[1]][2] )
diff_hour = am_hour + (12 - pm_hour - 1)
diff_min = (60 - pm_min) + am_min
diff = diff_hour + diff_min/60
diff.vec[i] = diff
}
return(diff.vec)
}
################################# CALCULATE FOR REST OF LOG #################################
# clean up missing values
d[d==""] = NA
d = d[!is.na(d$drug), ]  # get rid of future cells
# convert Excel format dates
d$sleep.latency = convert_hour_min(d$sleep.latency)
d$other.awake.time = convert_hour_min(d$other.awake.time)
# calculate new sleep variables
d$time.in.bed[is.na(d$time.in.bed)] = overnight_time_diff(d$bedtime[is.na(d$time.in.bed)],
d$wake.time[is.na(d$time.in.bed)])
d$sleep.time[is.na(d$sleep.time)] = d$time.in.bed[is.na(d$sleep.time)] - d$other.awake.time[is.na(d$sleep.time)] -
d$sleep.latency[is.na(d$sleep.time)]
d$sleep.effic[is.na(d$sleep.effic)] = d$sleep.time[is.na(d$sleep.effic)] / d$time.in.bed[is.na(d$sleep.effic)]
# add integer date variable
d$date2 = 1:nrow(d)
# add a column binning it into weeks
d$sunday = 0
d$sunday[seq(8, max(d$date2), 7)] = 1
# make week variable
d$weeks.since.tx.onset = floor(d$date2 / 7) - 4
# save filled-in data
write.csv(d, "sleep_data_pretty.csv")
################################# SLEEP VARIABLE PLOTS #################################
# set labels and plot characters for different drugs
drug.labels = c("Benadryl", "Benad + Zolp", "Melat + Zolp", "Lorazepam", "Melatonin", "None + Zolpidem", "Trazodone", "Zolpidem")
drug.shapes = c("B", "C", "C", "L", "M", "Z", "T", "Z")
##### Function to Make Plot #####
# v.line.y: integer for y-coordinate of vertical line annotations
plot_continuous = function(data, var.name, y.breaks, ylab, v.line.y, point.size) {
lim1 = min(y.breaks)
lim2 = max(y.breaks)
p = (
ggplot( data=data, aes(x=date2, y=data[[var.name]], group=TRUE, shape=as.factor(drug)) ) +
geom_line(size=.9, linetype=1) + geom_point(size=4.5, color="red") +
scale_shape_manual(values=drug.shapes, labels=drug.labels, name="") +
theme_bw() +
# plot 3 quartiles
geom_hline(yintercept=median(data[[var.name]], na.rm=TRUE), linetype=2, color="grey") +
geom_hline(yintercept=mean(data[[var.name]], na.rm=TRUE), linetype=2, color="grey") +
annotate("text", x=1, y=median(data[[var.name]], na.rm=TRUE), label="Median", size=4, color="grey", vjust=-.8) +
annotate("text", x=1, y=mean(data[[var.name]], na.rm=TRUE), label="Mean", size=4, color="grey", vjust=-.8) +
###### Plot Important Dates ######
# 12/4
geom_vline(xintercept=32, linetype=2, color="black") +
annotate("text", x=32, y=v.line.y, label="12/4: Therapy onset", size=4, angle=90, vjust=-.8) +
# 12/19
geom_vline(xintercept=47, linetype=2, color="black") +
annotate("text", x=47, y=v.line.y, label="12/19: TIB 8h; Benad 50 mg", size=point.size, angle=90, vjust=-.8) +
# 12/30
geom_vline(xintercept=58, linetype=2, color="black") +
annotate("text", x=58, y=v.line.y, label="12/30: TIB 8h; Benad 50 mg", size=point.size, angle=90, vjust=-.8) +
# 1/8
geom_vline(xintercept=67, linetype=2, color="black") +
annotate("text", x=67, y=v.line.y, label="1/8: TIB 8h; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 1/16
geom_vline(xintercept=76, linetype=2, color="black") +
annotate("text", x=76, y=v.line.y, label="1/16: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# Harvard visit
geom_vline(xintercept=82, linetype=2, color="blue") +
geom_vline(xintercept=83, linetype=2, color="blue") +
annotate("text", x=82, y=v.line.y, label="1/23 - 1/24: Harvard", size=4, angle=90, vjust=-.8, color="blue") +
# 1/29
geom_vline(xintercept=88, linetype=2, color="black") +
annotate("text", x=88, y=v.line.y, label="1/29: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/5
geom_vline(xintercept=95, linetype=2, color="black") +
annotate("text", x=95, y=v.line.y, label="2/5: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/12
geom_vline(xintercept=102, linetype=2, color="black") +
annotate("text", x=102, y=v.line.y, label="2/12: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/16
geom_vline(xintercept=107, linetype=2, color="black") +
annotate("text", x=107, y=v.line.y, label="(2/16: TIB 8:15; Benad 50 mg)", size=point.size, angle=90, vjust=-.8) +
# 2/19
geom_vline(xintercept=110, linetype=2, color="black") +
annotate("text", x=110, y=v.line.y, label="2/26: TIB 8:15; meds flexible", size=point.size, angle=90, vjust=-.8) +
# 2/26
geom_vline(xintercept=117, linetype=2, color="black") +
annotate("text", x=117, y=v.line.y, label="2/19: TIB 8:15; meds flexible", size=point.size, angle=90, vjust=-.8) +
# UW visit
geom_vline(xintercept=121, linetype=2, color="blue") +
geom_vline(xintercept=124, linetype=2, color="blue") +
annotate("text", x=123, y=v.line.y, label="3/2 - 3/6: UW", size=4, angle=90, vjust=0, color="blue") +
# x-axis: tick marks only on Sundays
xlab("Date (Sundays)") + ylab(ylab) + theme(axis.title = element_text(size=16) ) +
scale_x_continuous(breaks=which(data$sunday==1), labels=data$date[which(data$sunday==1)] ) +
#scale_x_continuous(breaks=seq(6, max(data$date2), 7), labels=data$date[seq(6, max(data$date2), 7)] ) +
# y-axis
scale_y_continuous( breaks=y.breaks, limits=c( lim1, lim2 ) )
)
p$plot_env = environment()
plot(p)
}
# plot each sleep variables
plot_continuous( d, "sleep.effic", y.breaks=seq(.3, 1, .05),
ylab="Sleep efficiency, prop", v.line.y=.4, point.size=4 )
################################# LOAD DATA AND FUNCTIONS #################################
setwd("~/Dropbox/Personal computer/Sleep/2014 sleep data")
d = read.csv("sleep_data_2.csv", header = TRUE)
library(ggplot2)
convert_hour_min = function(x) {
x2 = c()
for (i in 1:length(x)) {
hour = as.numeric( strsplit( as.character(x[i]), ":" )[[1]][1] )
min = as.numeric( strsplit( as.character(x[i]), ":" )[[1]][2] ) / 60
time = hour + min
x2[i] = time
}
return(x2)
}
overnight_time_diff = function(pm_time, am_time) {
diff.vec = c()
for (i in 1:length(pm_time) ) {
am_hour = as.numeric( strsplit( as.character(am_time[i]), ":" )[[1]][1] )
am_min = as.numeric( strsplit( as.character(am_time[i]), ":" )[[1]][2] )
pm_hour = as.numeric( strsplit( as.character(pm_time[i]), ":" )[[1]][1] )
pm_min = as.numeric( strsplit( as.character(pm_time[i]), ":" )[[1]][2] )
diff_hour = am_hour + (12 - pm_hour - 1)
diff_min = (60 - pm_min) + am_min
diff = diff_hour + diff_min/60
diff.vec[i] = diff
}
return(diff.vec)
}
################################# CALCULATE FOR REST OF LOG #################################
# clean up missing values
d[d==""] = NA
d = d[!is.na(d$drug), ]  # get rid of future cells
# convert Excel format dates
d$sleep.latency = convert_hour_min(d$sleep.latency)
d$other.awake.time = convert_hour_min(d$other.awake.time)
# calculate new sleep variables
d$time.in.bed[is.na(d$time.in.bed)] = overnight_time_diff(d$bedtime[is.na(d$time.in.bed)],
d$wake.time[is.na(d$time.in.bed)])
d$sleep.time[is.na(d$sleep.time)] = d$time.in.bed[is.na(d$sleep.time)] - d$other.awake.time[is.na(d$sleep.time)] -
d$sleep.latency[is.na(d$sleep.time)]
d$sleep.effic[is.na(d$sleep.effic)] = d$sleep.time[is.na(d$sleep.effic)] / d$time.in.bed[is.na(d$sleep.effic)]
# add integer date variable
d$date2 = 1:nrow(d)
# add a column binning it into weeks
d$sunday = 0
d$sunday[seq(8, max(d$date2), 7)] = 1
# make week variable
d$weeks.since.tx.onset = floor(d$date2 / 7) - 4
# save filled-in data
write.csv(d, "sleep_data_pretty.csv")
################################# SLEEP VARIABLE PLOTS #################################
# set labels and plot characters for different drugs
drug.labels = c("Benadryl", "Benad + Zolp", "Melat + Zolp", "Lorazepam", "Melatonin", "None + Zolpidem", "Trazodone", "Zolpidem")
drug.shapes = c("B", "C", "C", "L", "M", "Z", "T", "Z")
##### Function to Make Plot #####
# v.line.y: integer for y-coordinate of vertical line annotations
plot_continuous = function(data, var.name, y.breaks, ylab, v.line.y, point.size) {
lim1 = min(y.breaks)
lim2 = max(y.breaks)
p = (
ggplot( data=data, aes(x=date2, y=data[[var.name]], group=TRUE, shape=as.factor(drug)) ) +
geom_line(size=.9, linetype=1) + geom_point(size=4.5, color="red") +
scale_shape_manual(values=drug.shapes, labels=drug.labels, name="") +
theme_bw() +
# plot 3 quartiles
geom_hline(yintercept=median(data[[var.name]], na.rm=TRUE), linetype=2, color="grey") +
geom_hline(yintercept=mean(data[[var.name]], na.rm=TRUE), linetype=2, color="grey") +
annotate("text", x=1, y=median(data[[var.name]], na.rm=TRUE), label="Median", size=4, color="grey", vjust=-.8) +
annotate("text", x=1, y=mean(data[[var.name]], na.rm=TRUE), label="Mean", size=4, color="grey", vjust=-.8) +
###### Plot Important Dates ######
# 12/4
geom_vline(xintercept=32, linetype=2, color="black") +
annotate("text", x=32, y=v.line.y, label="12/4: Therapy onset", size=4, angle=90, vjust=-.8) +
# 12/19
geom_vline(xintercept=47, linetype=2, color="black") +
annotate("text", x=47, y=v.line.y, label="12/19: TIB 8h; Benad 50 mg", size=point.size, angle=90, vjust=-.8) +
# 12/30
geom_vline(xintercept=58, linetype=2, color="black") +
annotate("text", x=58, y=v.line.y, label="12/30: TIB 8h; Benad 50 mg", size=point.size, angle=90, vjust=-.8) +
# 1/8
geom_vline(xintercept=67, linetype=2, color="black") +
annotate("text", x=67, y=v.line.y, label="1/8: TIB 8h; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 1/16
geom_vline(xintercept=76, linetype=2, color="black") +
annotate("text", x=76, y=v.line.y, label="1/16: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# Harvard visit
geom_vline(xintercept=82, linetype=2, color="blue") +
geom_vline(xintercept=83, linetype=2, color="blue") +
annotate("text", x=82, y=v.line.y, label="1/23 - 1/24: Harvard", size=4, angle=90, vjust=-.8, color="blue") +
# 1/29
geom_vline(xintercept=88, linetype=2, color="black") +
annotate("text", x=88, y=v.line.y, label="1/29: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/5
geom_vline(xintercept=95, linetype=2, color="black") +
annotate("text", x=95, y=v.line.y, label="2/5: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/12
geom_vline(xintercept=102, linetype=2, color="black") +
annotate("text", x=102, y=v.line.y, label="2/12: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/16
geom_vline(xintercept=107, linetype=2, color="black") +
annotate("text", x=107, y=v.line.y, label="(2/16: TIB 8:15; Benad 50 mg)", size=point.size, angle=90, vjust=-.8) +
# 2/19
geom_vline(xintercept=110, linetype=2, color="black") +
annotate("text", x=110, y=v.line.y, label="2/26: TIB 8:15; meds flexible", size=point.size, angle=90, vjust=-.8) +
# 2/26
geom_vline(xintercept=117, linetype=2, color="black") +
annotate("text", x=117, y=v.line.y, label="2/19: TIB 8:15; meds flexible", size=point.size, angle=90, vjust=-.8) +
# UW visit
geom_vline(xintercept=121, linetype=2, color="blue") +
geom_vline(xintercept=124, linetype=2, color="blue") +
annotate("text", x=123, y=v.line.y, label="3/2 - 3/6: UW", size=4, angle=90, vjust=0, color="blue") +
# x-axis: tick marks only on Sundays
xlab("Date (Sundays)") + ylab(ylab) + theme(axis.title = element_text(size=16) ) +
scale_x_continuous(breaks=which(data$sunday==1), labels=data$date[which(data$sunday==1)] ) +
#scale_x_continuous(breaks=seq(6, max(data$date2), 7), labels=data$date[seq(6, max(data$date2), 7)] ) +
# y-axis
scale_y_continuous( breaks=y.breaks, limits=c( lim1, lim2 ) )
)
p$plot_env = environment()
plot(p)
}
# plot each sleep variables
plot_continuous( d, "sleep.effic", y.breaks=seq(.3, 1, .05),
ylab="Sleep efficiency, prop", v.line.y=.4, point.size=4 )
plot_continuous( d, "sleep.time", y.breaks=seq(2,10,1),
ylab="Sleep time, hrs", v.line.y=4, point.size=4 )
plot_continuous( d, "time.in.bed",
y.breaks=seq(6,11,.5), ylab="Time in bed, hrs", v.line.y=6.5,
point.size=4 )
plot_continuous = function(data, var.name, y.breaks, ylab, v.line.y, point.size) {
lim1 = min(y.breaks)
lim2 = max(y.breaks)
p = (
ggplot( data=data, aes(x=date2, y=data[[var.name]], group=TRUE, shape=as.factor(drug)) ) +
geom_line(size=.9, linetype=1) + geom_point(size=4.5, color="red") +
scale_shape_manual(values=drug.shapes, labels=drug.labels, name="") +
theme_bw() +
# plot 3 quartiles
geom_hline(yintercept=median(data[[var.name]], na.rm=TRUE), linetype=2, color="grey") +
geom_hline(yintercept=mean(data[[var.name]], na.rm=TRUE), linetype=2, color="grey") +
annotate("text", x=1, y=median(data[[var.name]], na.rm=TRUE), label="Median", size=4, color="grey", vjust=-.8) +
annotate("text", x=1, y=mean(data[[var.name]], na.rm=TRUE), label="Mean", size=4, color="grey", vjust=-.8) +
###### Plot Important Dates ######
# 12/4
geom_vline(xintercept=32, linetype=2, color="black") +
annotate("text", x=32, y=v.line.y, label="12/4: Therapy onset", size=4, angle=90, vjust=-.8) +
# 12/19
geom_vline(xintercept=47, linetype=2, color="black") +
annotate("text", x=47, y=v.line.y, label="12/19: TIB 8h; Benad 50 mg", size=point.size, angle=90, vjust=-.8) +
# 12/30
geom_vline(xintercept=58, linetype=2, color="black") +
annotate("text", x=58, y=v.line.y, label="12/30: TIB 8h; Benad 50 mg", size=point.size, angle=90, vjust=-.8) +
# 1/8
geom_vline(xintercept=67, linetype=2, color="black") +
annotate("text", x=67, y=v.line.y, label="1/8: TIB 8h; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 1/16
geom_vline(xintercept=76, linetype=2, color="black") +
annotate("text", x=76, y=v.line.y, label="1/16: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# Harvard visit
geom_vline(xintercept=82, linetype=2, color="blue") +
geom_vline(xintercept=83, linetype=2, color="blue") +
annotate("text", x=82, y=v.line.y, label="1/23 - 1/24: Harvard", size=4, angle=90, vjust=-.8, color="blue") +
# 1/29
geom_vline(xintercept=88, linetype=2, color="black") +
annotate("text", x=88, y=v.line.y, label="1/29: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/5
geom_vline(xintercept=95, linetype=2, color="black") +
annotate("text", x=95, y=v.line.y, label="2/5: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/12
geom_vline(xintercept=102, linetype=2, color="black") +
annotate("text", x=102, y=v.line.y, label="2/12: TIB 8:15; Benad 25 mg", size=point.size, angle=90, vjust=-.8) +
# 2/16
geom_vline(xintercept=107, linetype=2, color="black") +
annotate("text", x=107, y=v.line.y, label="(2/16: TIB 8:15; Benad 50 mg)", size=point.size, angle=90, vjust=-.8) +
# 2/19
geom_vline(xintercept=110, linetype=2, color="black") +
annotate("text", x=110, y=v.line.y, label="2/19: TIB 8:15; meds flexible", size=point.size, angle=90, vjust=-.8) +
# 2/26
geom_vline(xintercept=117, linetype=2, color="black") +
annotate("text", x=117, y=v.line.y, label="2/26: TIB 8:15; meds flexible", size=point.size, angle=90, vjust=-.8) +
# UW visit
geom_vline(xintercept=121, linetype=2, color="blue") +
geom_vline(xintercept=124, linetype=2, color="blue") +
annotate("text", x=123, y=v.line.y, label="3/2 - 3/6: UW", size=4, angle=90, vjust=0, color="blue") +
# x-axis: tick marks only on Sundays
xlab("Date (Sundays)") + ylab(ylab) + theme(axis.title = element_text(size=16) ) +
scale_x_continuous(breaks=which(data$sunday==1), labels=data$date[which(data$sunday==1)] ) +
#scale_x_continuous(breaks=seq(6, max(data$date2), 7), labels=data$date[seq(6, max(data$date2), 7)] ) +
# y-axis
scale_y_continuous( breaks=y.breaks, limits=c( lim1, lim2 ) )
)
p$plot_env = environment()
plot(p)
}
# plot each sleep variables
plot_continuous( d, "sleep.effic", y.breaks=seq(.3, 1, .05),
ylab="Sleep efficiency, prop", v.line.y=.4, point.size=4 )
